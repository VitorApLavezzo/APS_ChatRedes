package tieteMonitor.client;

import java.awt.*;
import java.io.*;
import java.net.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.List;
import java.util.ArrayList;
import javax.swing.*;

/**
 * Componente de chat entre inspetores do Sistema de Monitoramento Ambiental do Rio Tiet√™
 * Permite comunica√ß√£o direta entre inspetores em diferentes locais de monitoramento
 */
public class ChatInspetores {
    private ClienteMonitoramento clientePrincipal;
    private Socket socket;
    private DataOutputStream dataOut;
    private DataInputStream dataIn;

    private JFrame janela;
    private JTextArea areaChat;
    private JTextField campoMensagem;
    private JComboBox<String> comboInspetores;
    private DefaultComboBoxModel<String> modeloInspetores;
    private JButton botaoEnviar;

    private List<String> listaInspetores;
    private String destinatarioAtual;

    /**
     * Construtor da classe ChatInspetores
     *
     * @param cliente Refer√™ncia ao cliente principal de monitoramento
     * @param socket Socket de comunica√ß√£o com o servidor
     * @param dataOut Canal de sa√≠da para o servidor
     */
    public ChatInspetores(ClienteMonitoramento cliente, Socket socket, DataOutputStream dataOut) throws IOException {
        this.clientePrincipal = cliente;
        this.socket = socket;
        this.dataOut = dataOut;
        this.dataIn = new DataInputStream(socket.getInputStream());
        this.listaInspetores = new ArrayList<>();

        // Configura a interface primeiro
        configurarInterface();

        // Solicita a lista de inspetores ao servidor
        solicitarListaInspetores();
    }

    /**
     * Solicita a lista de inspetores conectados ao servidor
     */
    private void solicitarListaInspetores() {
        if (dataOut != null) {
            try {
                dataOut.writeUTF("CHAT:LISTAR_INSPETORES");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * Configura a interface gr√°fica do chat
     */
    private void configurarInterface() {
        // Configura√ß√£o da janela
        janela = new JFrame("Chat entre Inspetores - " + clientePrincipal.getNomeInspetor());
        janela.setSize(500, 400);
        janela.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);

        // √Årea de chat
        areaChat = new JTextArea();
        areaChat.setEditable(false);
        areaChat.setFont(new Font("SansSerif", Font.PLAIN, 14));
        JScrollPane scrollPane = new JScrollPane(areaChat);

        // Painel de sele√ß√£o de destinat√°rio
        JPanel painelDestinatario = new JPanel(new BorderLayout());
        painelDestinatario.setBorder(BorderFactory.createTitledBorder("Enviar para:"));

        modeloInspetores = new DefaultComboBoxModel<>();
        comboInspetores = new JComboBox<>(modeloInspetores);
        comboInspetores.addActionListener(e -> {
            destinatarioAtual = (String) comboInspetores.getSelectedItem();
            if (destinatarioAtual != null && !destinatarioAtual.equals("Todos")) {
                areaChat.append("[Sistema] Mensagens agora ser√£o enviadas para: " + destinatarioAtual + "\n");
            }
        });

        JButton botaoAtualizar = new JButton("Atualizar");
        botaoAtualizar.addActionListener(e -> solicitarListaInspetores());

        painelDestinatario.add(comboInspetores, BorderLayout.CENTER);
        painelDestinatario.add(botaoAtualizar, BorderLayout.EAST);

        // Painel de mensagem
        JPanel painelMensagem = new JPanel(new BorderLayout());
        campoMensagem = new JTextField();
        campoMensagem.addActionListener(e -> enviarMensagem());

        // Bot√£o de emoji
        JButton botaoEmoji = new JButton("üòä");
        botaoEmoji.setFont(new Font("Dialog", Font.PLAIN, 18));
        botaoEmoji.setFocusable(false);
        botaoEmoji.setMargin(new Insets(2, 6, 2, 6));
        botaoEmoji.addActionListener(e -> abrirPopupEmojis());

        botaoEnviar = new JButton("Enviar");
        botaoEnviar.addActionListener(e -> enviarMensagem());

        // Adiciona campo, bot√£o emoji e bot√£o enviar
        JPanel painelCampo = new JPanel(new BorderLayout());
        painelCampo.add(campoMensagem, BorderLayout.CENTER);
        painelCampo.add(botaoEmoji, BorderLayout.WEST);
        painelCampo.add(botaoEnviar, BorderLayout.EAST);
        painelMensagem.add(painelCampo, BorderLayout.CENTER);

        // Painel informativo
        JPanel painelInfo = new JPanel(new FlowLayout(FlowLayout.CENTER));
        JLabel labelInfo = new JLabel("Voc√™: " + clientePrincipal.getNomeInspetor() +
                " (" + clientePrincipal.getLocalMonitorado() + ")");
        painelInfo.add(labelInfo);

        // Configura√ß√£o do layout
        JPanel painelSul = new JPanel(new BorderLayout());
        painelSul.add(painelDestinatario, BorderLayout.NORTH);
        painelSul.add(painelMensagem, BorderLayout.CENTER);
        painelSul.add(painelInfo, BorderLayout.SOUTH);

        janela.getContentPane().add(scrollPane, BorderLayout.CENTER);
        janela.getContentPane().add(painelSul, BorderLayout.SOUTH);

        // Posiciona a janela
        janela.setLocationRelativeTo(clientePrincipal.getFrame());

        // Adiciona "Todos" como op√ß√£o padr√£o
        modeloInspetores.addElement("Todos");
        destinatarioAtual = "Todos";

        // Adiciona os inspetores j√° conhecidos
        atualizarListaInspetores();
    }

    /**
     * Atualiza a lista de inspetores no combobox
     */
    private void atualizarListaInspetores() {
        SwingUtilities.invokeLater(() -> {
            if (comboInspetores == null) {
                return; // Retorna se o combo ainda n√£o foi inicializado
            }

            System.out.println("DEBUG CHAT CLIENTE: Atualizando lista UI. Lista interna: " + this.listaInspetores); // Log de depura√ß√£o

            // Guarda a sele√ß√£o atual antes de limpar
            String selecaoAtual = (String) comboInspetores.getSelectedItem();

            // Limpar COMPLETAMENTE o modelo do JComboBox
            modeloInspetores.removeAllElements();

            // Adicionar "Todos" como a primeira op√ß√£o
            modeloInspetores.addElement("Todos");

            // Adicionar todos os inspetores da lista interna (this.listaInspetores)
            // A lista interna deve conter apenas os nomes recebidos do servidor (sem "Todos", "Central", etc.)
            for (String inspetor : this.listaInspetores) {
                String nomeLimpo = inspetor.trim();
                // Adiciona apenas nomes v√°lidos e diferentes do pr√≥prio cliente
                if (!nomeLimpo.isEmpty() && !nomeLimpo.equals(clientePrincipal.getNomeInspetor())) {
                    modeloInspetores.addElement(nomeLimpo); // Adiciona ao modelo do JComboBox
                }
            }

            // Restaura a sele√ß√£o ou seleciona "Todos"
            if (selecaoAtual != null && modeloInspetores.getIndexOf(selecaoAtual) >= 0) {
                comboInspetores.setSelectedItem(selecaoAtual);
            } else {
                comboInspetores.setSelectedIndex(0); // Seleciona "Todos" por padr√£o
                destinatarioAtual = "Todos"; // Atualiza a vari√°vel de destinat√°rio
            }
        });
    }

    /**
     * Envia uma mensagem para o destinat√°rio selecionado
     */
    private void enviarMensagem() {
        String mensagem = campoMensagem.getText().trim();
        if (!mensagem.isEmpty() && dataOut != null) {
            // Obt√©m o destinat√°rio selecionado de forma segura
            String destinatario = (String) comboInspetores.getSelectedItem();
            
            // Remove explicitamente o ':' inicial se existir
            if (destinatario != null && destinatario.startsWith(":")) {
                destinatario = destinatario.substring(1);
            }

            if (destinatario == null || destinatario.trim().isEmpty()) {
                destinatario = "Todos"; // Garante que sempre haja um destinat√°rio v√°lido
            }

            // Formata a mensagem
            String mensagemParaEnviar = "CHAT:PARA:" + destinatario + ":" + mensagem;
            
            // Log de depura√ß√£o no cliente
            System.out.println("DEBUG CLIENTE: Enviando para o servidor: " + mensagemParaEnviar);

            // Envia a mensagem
            try {
                dataOut.writeUTF(mensagemParaEnviar);
            } catch (IOException e) {
                e.printStackTrace();
            }

            // Adiciona mensagem na √°rea de chat (localmente)
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            String timestamp = sdf.format(new Date());

            String destinatarioTexto = destinatario.equals("Todos") ? "Todos" : "Privado para " + destinatario;
            areaChat.append("[" + timestamp + "] (" + destinatarioTexto + ") Voc√™: " + mensagem + "\n");

            // Limpa o campo de mensagem
            campoMensagem.setText("");
        }
    }

    /**
     * Processa mensagens recebidas do servidor
     *
     * @param mensagem A mensagem recebida
     * @return true se a mensagem foi processada, false caso contr√°rio
     */
    public boolean processarMensagem(String mensagem) {
        // A mensagem recebida J√Å EST√Å SEM O PREFIXO "CHAT:" neste m√©todo
        String conteudo = mensagem; // N√£o precisa mais remover o prefixo CHAT: aqui

        System.out.println("DEBUG CHAT CLIENTE: Processando mensagem: " + conteudo); // Log de depura√ß√£o

        // Processa diferentes tipos de mensagens de chat
        if (conteudo.startsWith("LISTA_INSPETORES:")) {
            // Atualiza lista COMPLETA de inspetores (recebida ao entrar ou solicitar)
            String listaStr = conteudo.substring("LISTA_INSPETORES:".length());
            List<String> listaInspetoresRecebida = parseListaInspetores(listaStr);

            // --- CORRE√á√ÉO: ATUALIZAR A LISTA INTERNA DO CHATINSPETORES ---
            SwingUtilities.invokeLater(() -> {
                 this.listaInspetores.clear(); // Limpa a lista interna atual
                 // Adiciona inspetores recebidos
                 for (String inspetor : listaInspetoresRecebida) {
                     String nomeLimpo = inspetor.trim();
                     if (!nomeLimpo.isEmpty()) {
                         this.listaInspetores.add(nomeLimpo); // Adiciona √† lista interna
                     }
                 }
                 Collections.sort(this.listaInspetores); // Manter a lista interna ordenada
                 this.atualizarListaInspetores(); // Chama o m√©todo local para ATUALIZAR O JCOMBOBOX
            });
            return true;
        } else if (conteudo.startsWith("MSG_DE:")) {
            // Processa mensagem de chat recebida de outro inspetor ou do sistema
            String dadosMensagem = conteudo.substring("MSG_DE:".length());
            processarMensagemRecebida(dadosMensagem); // M√©todo que adiciona a mensagem na √°rea de chat
            return true;
        } else if (conteudo.startsWith("CONECTADO:")) {
            String novoInspetor = conteudo.substring("CONECTADO:".length());
            // --- CORRE√á√ÉO: ADICIONAR NA LISTA INTERNA E ATUALIZAR JCOMBOBOX ---
            adicionarInspetor(novoInspetor); // Este m√©todo deve adicionar √† lista interna e chamar this.atualizarListaInspetores()
            return true;
        } else if (conteudo.startsWith("DESCONECTADO:")) {
            String inspetorSaiu = conteudo.substring("DESCONECTADO:".length());
            // --- CORRE√á√ÉO: REMOVER DA LISTA INTERNA E ATUALIZAR JCOMBOBOX ---
            removerInspetor(inspetorSaiu); // Este m√©todo deve remover da lista interna e chamar this.atualizarListaInspetores()
            return true;
        }

        // Se n√£o for um comando CHAT conhecido por ChatInspetores
        return false; // Indica que n√£o foi processado por ChatInspetores
    }

    // M√©todo auxiliar para parsear a string da lista de inspetores (se n√£o existir)
    private List<String> parseListaInspetores(String listaStr) {
        List<String> lista = new ArrayList<>();
        if (listaStr != null && !listaStr.trim().isEmpty()) {
            String[] inspetores = listaStr.split(",");
            for (String inspetor : inspetores) {
                String nomeLimpo = inspetor.trim();
                if (!nomeLimpo.isEmpty()) {
                    lista.add(nomeLimpo);
                }
            }
        }
        return lista;
    }

    /**
     * Processa mensagem recebida de outro inspetor
     *
     * @param dados Dados da mensagem no formato "remetente:mensagem" (ou pode incluir [PRIVADO])
     */
    private void processarMensagemRecebida(String dados) {
        System.out.println("DEBUG CHAT CLIENTE: Processando mensagem recebida: " + dados); // Log de depura√ß√£o
        
        String[] partes = dados.split(":", 2);
        if (partes.length == 2) {
            String remetente = partes[0];
            String mensagem = partes[1];
            
            // Verifica se √© uma mensagem privada
            boolean isPrivada = mensagem.endsWith(" [PRIVADO]");
            if (isPrivada) {
                mensagem = mensagem.substring(0, mensagem.length() - 10); // Remove o [PRIVADO]
            }
            
            String mensagemFormatada;
            if (isPrivada) {
                mensagemFormatada = String.format("[%s] (Privado para %s) %s: %s", 
                    new java.text.SimpleDateFormat("HH:mm:ss").format(new java.util.Date()),
                    remetente.equals(clientePrincipal.getNomeInspetor()) ? "Voc√™" : remetente,
                    remetente.equals(clientePrincipal.getNomeInspetor()) ? "Voc√™" : remetente,
                    mensagem);
            } else {
                mensagemFormatada = String.format("[%s] %s: %s", 
                    new java.text.SimpleDateFormat("HH:mm:ss").format(new java.util.Date()),
                    remetente,
                    mensagem);
            }
            
            areaChat.append(mensagemFormatada + "\n");
            areaChat.setCaretPosition(areaChat.getDocument().getLength());
        }
    }

    /**
     * Adiciona um inspetor √† lista e atualiza a interface
     *
     * @param inspetor O nome do inspetor a ser adicionado
     */
    private void adicionarInspetor(String inspetor) {
        // Adiciona o inspetor √† lista interna do ChatInspetores e atualiza o JComboBox
        SwingUtilities.invokeLater(() -> {
            String nomeLimpo = inspetor.trim();
            if (!nomeLimpo.isEmpty() && !this.listaInspetores.contains(nomeLimpo)) {
                this.listaInspetores.add(nomeLimpo); // Adiciona √† lista interna
                Collections.sort(this.listaInspetores); // Manter a lista interna ordenada
                this.atualizarListaInspetores(); // Chama o m√©todo local para ATUALIZAR O JCOMBOBOX
                // Opcional: Notificar na √°rea de chat (System message)
                 if (janela != null && janela.isVisible()) {
                     areaChat.append("[" + new SimpleDateFormat("HH:mm:ss").format(new Date()) + "] [Sistema] Inspetor conectado: " + nomeLimpo + "\n");
                 }
            }
        });
    }

    /**
     * Remove um inspetor da lista e atualiza a interface
     *
     * @param inspetor O nome do inspetor a ser removido
     */
    private void removerInspetor(String inspetor) {
        // Remove o inspetor da lista interna do ChatInspetores e atualiza o JComboBox
        SwingUtilities.invokeLater(() -> {
             String nomeLimpo = inspetor.trim();
            if (this.listaInspetores.remove(nomeLimpo)) { // Remove da lista interna
                // N√£o precisa ordenar ap√≥s remover
                this.atualizarListaInspetores(); // Chama o m√©todo local para ATUALIZAR O JCOMBOBOX
                // Opcional: Notificar na √°rea de chat (System message)
                 if (janela != null && janela.isVisible()) {
                     areaChat.append("[" + new SimpleDateFormat("HH:mm:ss").format(new Date()) + "] [Sistema] Inspetor desconectado: " + nomeLimpo + "\n");
                 }
            }
        });
    }

    /**
     * Alterna a visibilidade da janela de chat
     */
    public void toggle() {
        if (janela == null) {
            configurarInterface();
        }

        if (!janela.isVisible()) {
            janela.setVisible(true);
            solicitarListaInspetores(); // Atualiza a lista ao abrir
        } else {
            janela.setVisible(false);
        }
    }

    // Novo m√©todo para abrir o popup de emojis
    private void abrirPopupEmojis() {
        JDialog dialog = new JDialog(janela, "Emojis", true);
        dialog.setSize(400, 350);
        dialog.setLayout(new BorderLayout());

        // Categorias de emojis
        String[] categorias = {"Express√µes", "Natureza", "Objetos", "S√≠mbolos"};
        JComboBox<String> comboCategorias = new JComboBox<>(categorias);

        // Emojis por categoria
        Map<String, String[]> emojisPorCategoria = new HashMap<>();
        emojisPorCategoria.put("Express√µes", new String[]{"üòä", "üòÑ", "üòÉ", "üòÄ", "üòÅ", "üòÖ", "üòÇ", "ü§£", "üòä", "üòá", "üôÇ", "üôÉ", "üòâ", "üòå", "üòç", "ü•∞", "üòò", "üòó", "üòô", "üòö", "üòã", "üòõ", "üòù", "üòú", "ü§™", "ü§®", "üßê", "ü§ì", "üòé", "ü§©", "ü•≥", "üòè", "üòí", "üòû", "üòî", "üòü", "üòï", "üôÅ", "‚òπÔ∏è", "üò£", "üòñ", "üò´", "üò©", "ü•∫", "üò¢", "üò≠", "üò§", "üò†", "üò°", "ü§¨", "ü§Ø", "üò≥", "ü•µ", "ü•∂", "üò±", "üò®", "üò∞", "üò•", "üòì", "ü§ó", "ü§î", "ü§≠", "ü§´", "ü§•", "üò∂", "üòê", "üòë", "üò¨", "üôÑ", "üòØ", "üò¶", "üòß", "üòÆ", "üò≤", "ü•±", "üò¥", "ü§§", "üò™", "üòµ", "ü§ê", "ü•¥", "ü§¢", "ü§Æ", "ü§ß", "üò∑", "ü§í", "ü§ï"});
        emojisPorCategoria.put("Natureza", new String[]{"üå±", "üå≤", "üå≥", "üå¥", "üåµ", "üåæ", "üåø", "‚òòÔ∏è", "üçÄ", "üçÅ", "üçÇ", "üçÉ", "üå∫", "üå∏", "üåº", "üåª", "üåû", "üåù", "üåõ", "üåú", "üåö", "üåï", "üåñ", "üåó", "üåò", "üåë", "üåí", "üåì", "üåî", "üåô", "üåé", "üåç", "üåè", "üí´", "‚≠ê", "üåü", "‚ú®", "‚ö°", "‚òÑÔ∏è", "üí•", "üî•", "üå™", "üåà", "‚òÄÔ∏è", "üå§", "‚õÖ", "üå•", "‚òÅÔ∏è", "üå¶", "üåß", "‚õà", "üå©", "üå®", "‚ùÑÔ∏è", "‚òÉÔ∏è", "‚õÑ", "üå¨", "üí®", "üíß", "üí¶", "‚òî", "‚òÇÔ∏è", "üåä", "üå´"});
        emojisPorCategoria.put("Objetos", new String[]{"üì±", "üì≤", "üìü", "üì†", "üîã", "üîå", "üíª", "üñ•", "üñ®", "‚å®Ô∏è", "üñ±", "üñ≤", "üïπ", "üóú", "üíΩ", "üíæ", "üíø", "üìÄ", "üìº", "üì∑", "üì∏", "üìπ", "üé•", "üìΩ", "üéû", "üìû", "‚òéÔ∏è", "üìü", "üì†", "üì∫", "üìª", "üéô", "üéö", "üéõ", "üß≠", "‚è±", "‚è≤", "‚è∞", "üï∞", "‚åõÔ∏è", "‚è≥", "üì°", "üîã", "üîå", "üí°", "üî¶", "üïØ", "üóë", "üõ¢", "üí∏", "üíµ", "üí¥", "üí∂", "üí∑", "üóÉ", "üì¶", "üì´", "üì™", "üì¨", "üì≠", "üìÆ", "üó≥", "‚úâÔ∏è", "üì©", "üì®", "üìß", "üíå", "üì•", "üì§", "üì¶", "üè∑", "üó≥", "üõç", "üõí", "üéÅ", "üéà", "üéè", "üéÄ", "üéä", "üéâ", "üéé", "üèÆ", "üéê", "üßß", "‚úâÔ∏è", "üì©", "üì®", "üìß", "üíå", "üì•", "üì§", "üì¶", "üè∑", "üó≥", "üõç", "üõí", "üéÅ", "üéà", "üéè", "üéÄ", "üéä", "üéâ", "üéé", "üèÆ", "üéê", "üßß"});
        emojisPorCategoria.put("S√≠mbolos", new String[]{"‚ù§Ô∏è", "üß°", "üíõ", "üíö", "üíô", "üíú", "üñ§", "üíî", "‚ù£Ô∏è", "üíï", "üíû", "üíì", "üíó", "üíñ", "üíò", "üíù", "üíü", "‚òÆÔ∏è", "‚úùÔ∏è", "‚ò™Ô∏è", "üïâ", "‚ò∏Ô∏è", "‚ú°Ô∏è", "üîØ", "üïé", "‚òØÔ∏è", "‚ò¶Ô∏è", "üõê", "‚õé", "‚ôàÔ∏è", "‚ôâÔ∏è", "‚ôäÔ∏è", "‚ôãÔ∏è", "‚ôåÔ∏è", "‚ôçÔ∏è", "‚ôéÔ∏è", "‚ôèÔ∏è", "‚ôêÔ∏è", "‚ôëÔ∏è", "‚ôíÔ∏è", "‚ôìÔ∏è", "üÜî", "‚öõÔ∏è", "üâë", "‚ò¢Ô∏è", "‚ò£Ô∏è", "üì¥", "üì≥", "üà∂", "üàöÔ∏è", "üà∏", "üà∫", "üà∑Ô∏è", "‚ú¥Ô∏è", "üÜö", "üíÆ", "üâê", "„äôÔ∏è", "„äóÔ∏è", "üà¥", "üàµ", "üàπ", "üà≤", "üÖ∞Ô∏è", "üÖ±Ô∏è", "üÜé", "üÜë", "üÖæÔ∏è", "üÜò", "‚ùå", "‚≠ïÔ∏è", "üõë", "‚õîÔ∏è", "üìõ", "üö´", "üíØ", "üí¢", "‚ô®Ô∏è", "üö∑", "üöØ", "üö≥", "üö±", "üîû", "üìµ", "üö≠", "‚ùóÔ∏è", "‚ùï", "‚ùì", "‚ùî", "‚ÄºÔ∏è", "‚ÅâÔ∏è", "üîÖ", "üîÜ", "„ÄΩÔ∏è", "‚ö†Ô∏è", "üö∏", "üî±", "‚öúÔ∏è", "üî∞", "‚ôªÔ∏è", "‚úÖ", "üàØÔ∏è", "üíπ", "‚ùáÔ∏è", "‚ú≥Ô∏è", "‚ùé", "üåê", "üí†", "‚ìÇÔ∏è", "üåÄ", "üí§", "üèß", "üöæ", "‚ôøÔ∏è", "üÖøÔ∏è", "üõó", "üõÇ", "üõÉ", "üõÑ", "üõÖ", "üöπ", "üö∫", "üöº", "üöª", "üöÆ", "üé¶", "üì∂", "üàÅ", "üî£", "‚ÑπÔ∏è", "üî§", "üî°", "üî†", "üÜñ", "üÜó", "üÜô", "üÜí", "üÜï", "üÜì", "0Ô∏è‚É£", "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üî¢", "#Ô∏è‚É£", "*Ô∏è‚É£", "‚èèÔ∏è", "‚ñ∂Ô∏è", "‚è∏", "‚èπ", "‚è∫", "‚è≠", "‚èÆ", "‚è©", "‚è™", "‚è´", "‚è¨", "‚óÄÔ∏è", "üîº", "üîΩ", "‚û°Ô∏è", "‚¨ÖÔ∏è", "‚¨ÜÔ∏è", "‚¨áÔ∏è", "‚ÜóÔ∏è", "‚ÜòÔ∏è", "‚ÜôÔ∏è", "‚ÜñÔ∏è", "‚ÜïÔ∏è", "‚ÜîÔ∏è", "‚Ü™Ô∏è", "‚Ü©Ô∏è", "‚§¥Ô∏è", "‚§µÔ∏è", "üîÄ", "üîÅ", "üîÇ", "üîÑ", "üîÉ", "üéµ", "üé∂", "‚ûï", "‚ûñ", "‚ûó", "‚úñÔ∏è", "üí≤", "üí±", "‚Ñ¢Ô∏è", "¬©Ô∏è", "¬ÆÔ∏è", "üëÅ‚Äçüó®", "üîö", "üîô", "üîõ", "üîù", "üîú", "„Ä∞Ô∏è", "‚û∞", "‚ûø", "‚úîÔ∏è", "‚òëÔ∏è", "üîò", "üî¥", "üü†", "üü°", "üü¢", "üîµ", "üü£", "‚ö´Ô∏è", "‚ö™Ô∏è", "üü§", "üî∫", "üîª", "üî∏", "üîπ", "üî∂", "üî∑", "üî≥", "üî≤", "‚ñ™Ô∏è", "‚ñ´Ô∏è", "‚óæÔ∏è", "‚óΩÔ∏è", "‚óºÔ∏è", "‚óªÔ∏è", "üü•", "üüß", "üü®", "üü©", "üü¶", "üü™", "‚¨õÔ∏è", "‚¨úÔ∏è", "üü´", "üîà", "üîá", "üîâ", "üîä", "üîî", "üîï", "üì£", "üì¢", "üí¨", "üí≠", "üóØ", "‚ô†Ô∏è", "‚ô£Ô∏è", "‚ô•Ô∏è", "‚ô¶Ô∏è", "üÉè", "üé¥", "üÄÑÔ∏è", "üïê", "üïë", "üïí", "üïì", "üïî", "üïï", "üïñ", "üïó", "üïò", "üïô", "üïö", "üïõ", "üïú", "üïù", "üïû", "üïü", "üï†", "üï°", "üï¢", "üï£", "üï§", "üï•", "üï¶", "üïß"});

        JPanel painelEmojis = new JPanel(new GridLayout(0, 8, 2, 2));
        JScrollPane scrollEmojis = new JScrollPane(painelEmojis);
        scrollEmojis.setPreferredSize(new Dimension(350, 200));

        // Atualiza emojis ao trocar categoria
        comboCategorias.addActionListener(e -> {
            String categoria = (String) comboCategorias.getSelectedItem();
            painelEmojis.removeAll();
            for (String emoji : emojisPorCategoria.get(categoria)) {
                JButton botaoEmoji = new JButton(emoji);
                botaoEmoji.setFont(new Font("Dialog", Font.PLAIN, 22));
                botaoEmoji.setFocusPainted(false);
                botaoEmoji.setBorderPainted(false);
                botaoEmoji.setContentAreaFilled(false);
                botaoEmoji.setMargin(new Insets(0, 0, 0, 0));
                botaoEmoji.addActionListener(ev -> {
                    campoMensagem.setText(campoMensagem.getText() + emoji);
                    dialog.dispose();
                });
                painelEmojis.add(botaoEmoji);
            }
            painelEmojis.revalidate();
            painelEmojis.repaint();
        });
        comboCategorias.setSelectedIndex(0);

        dialog.add(comboCategorias, BorderLayout.NORTH);
        dialog.add(scrollEmojis, BorderLayout.CENTER);
        dialog.setLocationRelativeTo(janela);
        dialog.setVisible(true);
    }

    /**
     * Mostra a janela do chat
     */
    public void mostrar() {
        if (janela == null) {
            configurarInterface();
        }
        janela.setVisible(true);
        solicitarListaInspetores(); // Atualiza a lista ao abrir
    }

    /**
     * Retorna a lista de inspetores conectados
     * @return Lista de nomes dos inspetores
     */
    public List<String> getListaInspetores() {
        return new ArrayList<>(this.listaInspetores);
    }
}